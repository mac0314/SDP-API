#!/usr/bin/env node

/**
 * Module dependencies.
 */

 //process.env.NODE_ENV = 'production';
 process.env.NODE_ENV = 'development';

var app = require('../app');
var debug = require('debug')('myweb:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var util = require('util');
var config = require('config.json')('./config/config.json');

var morgan = require('morgan');

var os = require('os');
var cluster = require('cluster');

cluster.schedulingPolicy = cluster.SCHED_RR;

var CronJob = require('cron').CronJob;

var WTController = require('../controllers/scraping/webtoons.ctrl');


var cpuCount = os.cpus().length;

global.title = config.app.title;

var worker = [];

if(cluster.isMaster) {
    cluster.on('exit', function(worker) {
        console.log('worker' + worker.pid + ' died --> start again');
        cluster.fork();
    });
    console.log("-----------------------------");
    console.log("\t" + global.title + " start!\n");
    console.log('CPU Count:', cpuCount);

    for(var i = 0; i < cpuCount; i++) {
        worker[i] = cluster.fork();
    }

    // sec, min, hour, day of month, month, day of week
    new CronJob('50 * * * * *',//'00 00 04 * * 0-6',
    function() {
      console.log('Load webtoon data');

      WTController.crawlingWebtoonData(function(error, resultObject){

      });
    }, null, true, 'Asia/Seoul');

}else {

    /**
     * Get port from environment and store in Express.
     */

    var port = normalizePort(process.env.PORT || '12000');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    var server = http.createServer(app);

    server.listen(port, function(){
      console.log('Server Listen ' + port + ' port');
    });
    server.on('error', onError);
    server.on('listening', onListening);

}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
